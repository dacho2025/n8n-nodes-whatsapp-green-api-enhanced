diff --git a/.eslintrc.js b/.eslintrc.js
new file mode 100644
index 0000000..cc148d4
--- /dev/null
+++ b/.eslintrc.js
@@ -0,0 +1,25 @@
+module.exports = {
+	root: true,
+	env: {
+		browser: true,
+		es6: true,
+		node: true,
+	},
+	extends: [
+		'eslint:recommended',
+	],
+	parser: '@typescript-eslint/parser',
+	parserOptions: {
+		ecmaVersion: 2020,
+		sourceType: 'module',
+	},
+	rules: {
+		'no-unused-vars': 'off',
+		'no-console': 'off',
+		'no-undef': 'off',
+	},
+	ignorePatterns: [
+		'dist/**/*',
+		'node_modules/**/*',
+	],
+};
\ No newline at end of file
diff --git a/node_modules/.bin/tsc b/node_modules/.bin/tsc
old mode 100644
new mode 100755
diff --git a/node_modules/.package-lock.json b/node_modules/.package-lock.json
index 6823579..041c6c9 100644
--- a/node_modules/.package-lock.json
+++ b/node_modules/.package-lock.json
@@ -1,6 +1,6 @@
 {
   "name": "n8n-nodes-whatsapp-green-api-enhanced",
-  "version": "1.2.0",
+  "version": "1.2.2",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
diff --git a/package-lock.json b/package-lock.json
index c07bd8d..f4d7887 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -15,7 +15,7 @@
         "eslint": "^8.29.0",
         "eslint-plugin-n8n-nodes-base": "^1.11.0",
         "gulp": "^4.0.2",
-        "gulp-rename": "^2.1.0",
+        "gulp-rename": "^2.0.0",
         "n8n-workflow": "*",
         "prettier": "^2.7.1",
         "typescript": "~4.8.4"
diff --git a/package.json b/package.json
index e8675ef..c6a364a 100644
--- a/package.json
+++ b/package.json
@@ -39,8 +39,8 @@
     "build:icons": "gulp build:icons",
     "dev": "tsc --watch",
     "format": "prettier nodes credentials utils --write",
-    "lint": "eslint dist/nodes dist/credentials dist/utils package.json",
-    "lintfix": "eslint dist/nodes dist/credentials dist/utils package.json --fix",
+    "lint": "eslint nodes credentials utils --ext .ts",
+    "lintfix": "eslint nodes credentials utils --ext .ts --fix",
     "prepublishOnly": "npm run build"
   },
   "files": [
diff --git a/utils/FileDownloader.ts b/utils/FileDownloader.ts
index 88b4cd8..3a79489 100644
--- a/utils/FileDownloader.ts
+++ b/utils/FileDownloader.ts
@@ -124,50 +124,56 @@ export class FileDownloader {
 
 			// Extract basic file info based on message type
 			switch (messageType) {
-				case 'imageMessage':
+				case 'imageMessage': {
 					const imageData = messageData.imageMessageData as IDataObject;
 					fileInfo.fileName = `image_${Date.now()}.jpg`;
 					fileInfo.mimeType = 'image/jpeg';
 					fileInfo.caption = imageData?.caption as string || '';
 					fileInfo.downloadUrl = imageData?.downloadUrl as string;
 					break;
+				}
 
-				case 'audioMessage':
+				case 'audioMessage': {
 					const audioData = messageData.audioMessageData as IDataObject;
 					fileInfo.fileName = `audio_${Date.now()}.mp3`;
 					fileInfo.mimeType = 'audio/mpeg';
 					fileInfo.downloadUrl = audioData?.downloadUrl as string;
 					break;
+				}
 
-				case 'videoMessage':
+				case 'videoMessage': {
 					const videoData = messageData.videoMessageData as IDataObject;
 					fileInfo.fileName = `video_${Date.now()}.mp4`;
 					fileInfo.mimeType = 'video/mp4';
 					fileInfo.caption = videoData?.caption as string || '';
 					fileInfo.downloadUrl = videoData?.downloadUrl as string;
 					break;
+				}
 
-				case 'documentMessage':
+				case 'documentMessage': {
 					const docData = messageData.documentMessageData as IDataObject;
 					fileInfo.fileName = docData?.fileName as string || `document_${Date.now()}`;
 					fileInfo.mimeType = docData?.mimeType as string || 'application/octet-stream';
 					fileInfo.caption = docData?.caption as string || '';
 					fileInfo.downloadUrl = docData?.downloadUrl as string;
 					break;
+				}
 
-				case 'voiceMessage':
+				case 'voiceMessage': {
 					const voiceData = messageData.voiceMessageData as IDataObject;
 					fileInfo.fileName = `voice_${Date.now()}.ogg`;
 					fileInfo.mimeType = 'audio/ogg';
 					fileInfo.downloadUrl = voiceData?.downloadUrl as string;
 					break;
+				}
 
-				case 'stickerMessage':
+				case 'stickerMessage': {
 					const stickerData = messageData.stickerMessageData as IDataObject;
 					fileInfo.fileName = `sticker_${Date.now()}.webp`;
 					fileInfo.mimeType = 'image/webp';
 					fileInfo.downloadUrl = stickerData?.downloadUrl as string;
 					break;
+				}
 
 				default:
 					return null;
